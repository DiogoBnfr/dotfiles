#+TITLE: Vaeep's GNU Emacs Configuration
#+AUTHOR: Diogo Gon√ßalves (Vaeep)
#+DESCRIPTION: Vaeep's personal Emacs configuration.
#+STARTUP: showeverything
#+OPTION: toc:2

* TABLE OF CONTENTS :toc:
- [[#introduction][INTRODUCTION]]
- [[#boot-time-applications][BOOT-TIME APPLICATIONS]]
  - [[#setting-package-manager][Setting Package Manager]]
  - [[#general-keybindings][General Keybindings]]
- [[#quality-of-life-tweaks][QUALITY OF LIFE TWEAKS]]
  - [[#reload-init-file][Reload Init File]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#setting-rainbow-mode][Setting Rainbow Mode]]
- [[#graphical-user-interface][GRAPHICAL USER INTERFACE]]
  - [[#disable-menubar-toolbar-and-scrollbar][Disable Menubar, Toolbar and Scrollbar]]
  - [[#display-relative-line-numbers][Display Relative Line Numbers]]
  - [[#setting-font-faces][Setting Font Faces]]
  - [[#setting-themes][Setting Themes]]
- [[#org-mode][ORG-MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#prog-modes][PROG-MODES]]
- [[#terminal][TERMINAL]]
  - [[#setting-vterm][Setting Vterm]]
- [[#external-connections][EXTERNAL CONNECTIONS]]
  - [[#discord-rich-presence][Discord Rich Presence]]
  - [[#wakatime][Wakatime]]

* INTRODUCTION
* BOOT-TIME APPLICATIONS
** Setting Package Manager
#+BEGIN_SRC emacs-lisp
    (defvar elpaca-installer-version 0.7)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil :depth 1
                                  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (< emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                     ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                     ,@(when-let ((depth (plist-get order :depth)))
                                                         (list (format "--depth=%d" depth) "--no-single-branch"))
                                                     ,(plist-get order :repo) ,repo))))
                     ((zerop (call-process "git" nil buffer t "checkout"
                                           (or (plist-get order :ref) "--"))))
                     (emacs (concat invocation-directory invocation-name))
                     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                           "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                     ((require 'elpaca))
                     ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;; Block until current queue processed.
  (elpaca-wait)
#+END_SRC

#+RESULTS:

*** Related
- [[https://github.com/progfolio/elpaca?tab=readme-ov-file#fn.2][Elpaca Repository]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][Early Init File]]
** General Keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC

#+RESULTS:

* QUALITY OF LIFE TWEAKS
** Reload Init File
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
#+END_SRC

#+RESULTS:
: reload-init-file
** Sudo Edit
This allows us to open files with sudo privileges even if we initially opened the file without such privileges.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit 
    :ensure t)
#+END_SRC

#+RESULTS:
** Setting Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook org-mode prog-mode)
#+END_SRC

#+RESULTS:

* GRAPHICAL USER INTERFACE
** Disable Menubar, Toolbar and Scrollbar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+END_SRC

#+RESULTS:

** Display Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+END_SRC

#+RESULTS:
: relative

** Setting Font Faces
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :font "Iosevka NFP"
                      :height 180
                      :weight 'medium)
  ;; Variable-pitch is used in the web browser
  (set-face-attribute 'variable-pitch nil
                      :font "Iosevka NFP"
                      :height 180
                      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
                      :font "Iosevka NFP"
                      :height 180
                      :weight 'medium)
  (setq-default line-spacing 0.12)
#+END_SRC

#+RESULTS:
: 0.12

** Setting Themes
#+BEGIN_SRC emacs-lisp
  ;; Doom Emacs Themes
  (use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Set the theme
  (load-theme 'doom-earl-grey)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

  ;; Standalone Themes
  (use-package distinguished-theme :ensure t)
#+END_SRC

#+RESULTS:

*** Favorite Themes
**** Light
- doom-earl-grey
- doom-plain
**** Dark
- doom-wilmersdorf
- doom-pine
- doom-sourcerer
*** Related
[[https://arxiv.org/pdf/2008.06030.pdf][On The Design of Text Editors - Nicolas P. Rougier]]
* ORG-MODE
** Enabling Table of Contents
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

#+RESULTS:

** Enabling Org Bullets
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))) 
#+END_SRC

#+RESULTS:
| (lambda nil (org-bullets-mode 1)) | org-indent-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Disable Electric Indent
#+BEGIN_SRC emacs-lisp
  (electric-indent-mode -1)
#+END_SRC

#+RESULTS:
* PROG-MODES
* TERMINAL
** Setting Vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq shell-file-name "/bin/bash"
          vterm-max-scrollback 5000))
#+END_SRC
Also setting vterm-toggle so I can open easily to execute minor tasks inside of it without leaving the current buffer.
#+BEGIN_SRC emacs-lisp
  (use-package vterm-toggle
    :ensure t  
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
             '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                (display-buffer-reuse-window display-buffer-at-bottom)
                ;;(display-buffer-reuse-window display-buffer-in-direction)
                ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                ;;(direction . bottom)
                ;;(dedicated . t) ;dedicated is supported in emacs27
                (reusable-frames . visible)
                (window-height . 0.3))))
#+END_SRC

#+RESULTS:
* EXTERNAL CONNECTIONS
** Discord Rich Presence
#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :ensure t
    :config
    (elcord-mode))
#+END_SRC

#+RESULTS:

** Wakatime
#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :ensure t
    :config
    (global-wakatime-mode))
#+END_SRC

#+RESULTS:
