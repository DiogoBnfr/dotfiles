#+TITLE: Vaeep's GNU Emacs Configuration
#+AUTHOR: Diogo Gonçalves (Vaeep)
#+DESCRIPTION: Vaeep's personal Emacs configuration.
#+STARTUP: showeverything
#+OPTION: toc:2

* TABLE OF CONTENTS :toc:
- [[#introduction][INTRODUCTION]]
- [[#boot-time-applications][BOOT-TIME APPLICATIONS]]
  - [[#setting-package-manager][Setting Package Manager]]
  - [[#general-keybindings][General Keybindings]]
- [[#quality-of-life-tweaks][QUALITY OF LIFE TWEAKS]]
  - [[#reload-init-file][Reload Init File]]
  - [[#sudo-edit][Sudo Edit]]
  - [[#setting-rainbow-mode][Setting Rainbow Mode]]
  - [[#diminish][Diminish]]
- [[#graphical-user-interface][GRAPHICAL USER INTERFACE]]
  - [[#disable-menubar-toolbar-and-scrollbar][Disable Menubar, Toolbar and Scrollbar]]
  - [[#display-relative-line-numbers][Display Relative Line Numbers]]
  - [[#setting-font-faces][Setting Font Faces]]
  - [[#setting-themes][Setting Themes]]
  - [[#setting-custom-mode-line][Setting Custom Mode-Line]]
  - [[#icons][Icons]]
  - [[#dashboard][Dashboard]]
- [[#org-mode][ORG-MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-agenda][Org-agenda]]
  - [[#set-default-file-apps][Set Default File Apps]]
- [[#prog-modes][PROG-MODES]]
  - [[#flycheck][Flycheck]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#dabbrev][Dabbrev]]
  - [[#orderless][Orderless]]
- [[#mini-buffer][MINI-BUFFER]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
- [[#terminal][TERMINAL]]
  - [[#setting-vterm][Setting Vterm]]
- [[#git][GIT]]
  - [[#projectile][Projectile]]
- [[#external-connections][EXTERNAL CONNECTIONS]]
  - [[#discord-rich-presence][Discord Rich Presence]]
  - [[#wakatime][Wakatime]]
- [[#others][OTHERS]]
  - [[#app-launcher][App Launcher]]

*** TODO CONFIG.ORG [0/13]
- [ ] Setup Vertico
- [ ] Setup Marginalia
- [ ] Improve todo list, tasks and reminders in general
- [ ] Create daily notes automatizations and templates
- [ ] Version Control of my notes
- [ ] Set a prog-modes for: C, C++, JS (and frameworks), HTML, CSS, C#, Python, Haskell, Lua...
- [ ] Search more about Company, Corfu and Cape to know differences and what is better
- [ ] Search about Eglot x Lsp-mode to know what is better
- [ ] Make the configuration easily extensible for new languages
- [ ] Excalidraw integration with Org
- [ ] Setup a good Git workflow
- [ ] Create keybindings for vterm-toggle
- [ ] Add directories to org-agenda recursively
* INTRODUCTION
* BOOT-TIME APPLICATIONS
** Setting Package Manager
#+BEGIN_SRC emacs-lisp
    (defvar elpaca-installer-version 0.7)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                  :ref nil :depth 1
                                  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
           (build (expand-file-name "elpaca/" elpaca-builds-directory))
           (order (cdr elpaca-order))
           (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
        (make-directory repo t)
        (when (< emacs-major-version 28) (require 'subr-x))
        (condition-case-unless-debug err
            (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                     ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                     ,@(when-let ((depth (plist-get order :depth)))
                                                         (list (format "--depth=%d" depth) "--no-single-branch"))
                                                     ,(plist-get order :repo) ,repo))))
                     ((zerop (call-process "git" nil buffer t "checkout"
                                           (or (plist-get order :ref) "--"))))
                     (emacs (concat invocation-directory invocation-name))
                     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                           "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                     ((require 'elpaca))
                     ((elpaca-generate-autoloads "elpaca" repo)))
                (progn (message "%s" (buffer-string)) (kill-buffer buffer))
              (error "%s" (with-current-buffer buffer (buffer-string))))
          ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" repo)
        (load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;; Block until current queue processed.
  (elpaca-wait)
#+END_SRC

*** Related
- [[https://github.com/progfolio/elpaca?tab=readme-ov-file#fn.2][Elpaca Repository]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][Early Init File]]
** General Keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t)
#+END_SRC

#+RESULTS:

* QUALITY OF LIFE TWEAKS
** Reload Init File
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))

  (global-set-key (kbd "C-x C-e") 'reload-init-file)
#+END_SRC

#+RESULTS:
: reload-init-file
** Sudo Edit
This allows us to open files with sudo privileges even if we initially opened the file without such privileges.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit 
    :ensure t)
#+END_SRC

#+RESULTS:
** Setting Rainbow Mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish
    :hook org-mode prog-mode)
#+END_SRC

#+RESULTS:
** Diminish
This package hide minor modes abbreviations. You can :diminish to use-package blocks hide that mode.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

#+RESULTS:

* GRAPHICAL USER INTERFACE
** Disable Menubar, Toolbar and Scrollbar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+END_SRC

#+RESULTS:
** Display Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+END_SRC

#+RESULTS:
: relative

** Setting Font Faces
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :font "Iosevka NFP"
                      :height 180
                      :weight 'medium)
  ;; Variable-pitch is used in the web browser
  (set-face-attribute 'variable-pitch nil
                      :font "Iosevka NFP"
                      :height 180
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                      :font "Iosevka NFP"
                      :height 180
                      :weight 'medium)
  (setq-default line-spacing 0.0)
#+END_SRC

#+RESULTS:
: 0.0
** Setting Themes
#+BEGIN_SRC emacs-lisp
  ;; Doom Emacs Themes
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Set the theme
    (load-theme 'doom-one)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package lambda-themes :ensure (:host github :repo "lambda-emacs/lambda-themes")
    :custom
    (lambda-themes-set-italic-comments t)
    (lambda-themes-set-italic-keywords t)
    (lambda-themes-set-variable-pitch t)) 

  ;; Standalone Themes
  (use-package gruber-darker-theme :ensure t)
  (use-package distinguished-theme :ensure t)
  (use-package moe-theme :ensure t)
#+END_SRC

#+RESULTS:

*** Favorite Themes
**** Light
- doom-earl-grey
- doom-plain
**** Dark
- doom-wilmersdorf
- doom-pine
- doom-sourcerer
- doom-Iosevkm
- doom-miramare
- doom-henna
*** Related
[[https://arxiv.org/pdf/2008.06030.pdf][On The Design of Text Editors - Nicolas P. Rougier]]
** Setting Custom Mode-Line
#+BEGIN_SRC emacs-lisp
  (use-package lambda-line 
    :ensure (:host github :repo "lambda-emacs/lambda-line")
    :custom
      (lambda-line-position 'bottom) ;; Set position of status-line 
      (lambda-line-abbrev t) ;; abbreviate major modes
      (lambda-line-hspace "  ")  ;; add some cushion
      (lambda-line-prefix t) ;; use a prefix symbol
      (lambda-line-prefix-padding nil) ;; no extra space for prefix 
      (lambda-line-status-invert nil)  ;; no invert colors
      (lambda-line-gui-ro-symbol  " ⨂") ;; symbols
      (lambda-line-gui-mod-symbol " ⬤") 
      (lambda-line-gui-rw-symbol  " ◯") 
      (lambda-line-space-top +.0)  ;; padding on top and bottom of line
      (lambda-line-space-bottom -.0)
      (lambda-line-symbol-position 0) ;; adjust the vertical placement of symbol
      :config
      ;; DISABLED
      ;; (lambda-line-mode) 
      ;; set divider line in footer
      (when (eq lambda-line-position 'top)
        (setq-default mode-line-format (list "%_"))
        (setq mode-line-format (list "%_"))))

  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-height 40)
    (setq doom-modeline-project-detection 'auto)
    (setq doom-modeline-icon t)
    (setq doom-modeline-buffer-file-name-style 'auto)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-lsp-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-minor-modes nil)
    (setq doom-modeline-env-version t))
    ;; DISABLED
    ;;(doom-modeline-mode 1))
 #+END_SRC

#+RESULTS:
*** Related
- [[https://github.com/progfolio/elpaca/blob/master/doc/manual.md#use-package-integration][Elpaca Install Packages from Repositories]]
** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :diminish
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :diminish)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (use-package nerd-icons
    :ensure t)
#+END_SRC

#+RESULTS:
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 3)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 3)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

#+RESULTS:

* ORG-MODE
** Enabling Table of Contents
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

#+RESULTS:
** Enabling Org Bullets
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))) 
#+END_SRC

#+RESULTS:
| (lambda nil (org-indent-mode 1)) | org-indent-mode | toc-org-enable | rainbow-mode | (lambda nil (org-bullets-mode 1)) | t | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
** Disable Electric Indent
#+BEGIN_SRC emacs-lisp
  (electric-indent-mode -1)
  (setq org-edit-src-content-indentation 2)
#+END_SRC

#+RESULTS:
: 2
** Org-agenda
#+begin_src emacs-lisp
  ;; Need to add all subdirectories from ~/notes/ in order to work properly with org-agenda
  (setq org-agenda-files '("~/notes/"
                           "~/notes/f2024/"
                           "~/.emacs.d/config.org"))
  (setq org-agenda-span 14)
#+end_src

#+RESULTS:
: 10
** Set Default File Apps
#+begin_src emacs-lisp
  (add-to-list 'org-file-apps '("\\.pdf" . "zathura %s"))
#+end_src

#+RESULTS:
: ((.pdf' . zathura %s) (\.pdf . zathura %s) (auto-mode . emacs) (directory . emacs) (\.mm\' . default) (\.x?html?\' . default) (\.pdf\' . default))
* PROG-MODES
A modern on-the-fly syntax checking extension.
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init 
    (global-flycheck-mode))
#+END_SRC

#+RESULTS:
*** Related
- [[https://www.flycheck.org/en/latest/index.html][FlyCheck]]
** Corfu
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :ensure t
    :after orderless
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-quit-at-boundary 'separator)
    (corfu-echo-documentation 0.25)
    (corfu-preselect 'prompt)
    (corfu-scroll-margin 5)
    :bind (:map corfu-map
                ("M-SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode)
    (corfu-history-mode))
#+END_SRC

#+RESULTS:

*** Related
These two, and of course, the Corfu repo on GitHub presents the mains reasons for me to choose Corfu instead of Company.
- [[https://youtu.be/Vx0bSKF4y78?si=QsQ6stSSHj8515db][Code Completion In Emacs - Everything You Need To Know]]
- [[https://takeonrules.com/2022/01/17/switching-from-company-to-corfu-for-emacs-completion/][Switching from Company to Corfu]]
** Cape
Provides more completion backends for Corfu.
#+BEGIN_SRC emacs-lisp
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)  
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)  
)
#+END_SRC

#+RESULTS:

** Dabbrev
#+BEGIN_SRC emacs-lisp
  (use-package dabbrev
    :ensure t
    :bind(("M-/" . dabbrev-completion)
          ("C-M-/" . dabbrev-expand))
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
    (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
    (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode))
#+END_SRC

#+RESULTS:
** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

#+RESULTS:

* MINI-BUFFER
** Vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init 
    (vertico-mode)
    (setq vertico-scroll-margin 3))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
 #+END_SRC

#+RESULTS:
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

#+RESULTS:

* TERMINAL
** Setting Vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (setq shell-file-name "/bin/sh"
          vterm-max-scrollback 5000))
#+END_SRC

#+RESULTS:

Also setting vterm-toggle so I can open easily to execute minor tasks inside of it without leaving the current buffer.
#+BEGIN_SRC emacs-lisp
  (use-package vterm-toggle
    :ensure t  
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
             '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                (display-buffer-reuse-window display-buffer-at-bottom)
                ;;(display-buffer-reuse-window display-buffer-in-direction)
                ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                ;;(direction . bottom)
                ;;(dedicated . t) ;dedicated is supported in emacs27
                (reusable-frames . visible)
                (window-height . 0.3))))
#+END_SRC

#+RESULTS:
* GIT
** Projectile
Helps interacting with projects (any versioned directory) inside Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1))
#+END_SRC

#+RESULTS:

* EXTERNAL CONNECTIONS
** Discord Rich Presence
#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :ensure t
    :config
    (elcord-mode))
#+END_SRC

#+RESULTS:

** Wakatime
#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :ensure t
    :diminish
    :config
    (global-wakatime-mode))
#+END_SRC

#+RESULTS:
* OTHERS
** App Launcher
#+BEGIN_SRC emacs-lisp
  ;; DISABLED
  ;; (use-package app-launcher :ensure (app-launcher :host github :repo "SebastianWae/app-launcher"))
#+END_SRC

#+RESULTS:
