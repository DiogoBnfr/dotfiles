#+TITLE: Vaeep's GNU Emacs Config
#+AUTHOR: Diogo Bonofre (Vaeep)

* Editor
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (set-face-attribute 'default nil
  		    :family "Iosevka NF"
  		    :height 200
  		    :weight 'medium)

  (defun display-line-numbers-hook ()
    (display-line-numbers-mode t)
    (setq display-line-numbers 'relative
  	display-line-numbers-current-absolute t))

  (add-hook 'prog-mode-hook 'display-line-numbers-hook)
  (add-hook 'org-mode-hook 'display-line-numbers-hook)
  (add-hook 'text-mode-hook 'display-line-numbers-hook)

  (global-visual-line-mode 1)

  (electric-pair-mode t)
#+END_SRC
* Macros
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))

  (global-set-key (kbd "C-x C-e") 'reload-init-file)
#+END_SRC
* Package Manager
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	"straight/repos/straight.el/bootstrap.el"
	(or (bound-and-true-p straight-base-dir)
	    user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'org)
  (straight-use-package 'use-package)
#+END_SRC
* Development
** Completion Interface
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :config
    (global-company-mode))
  
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
#+END_SRC
** Languages
*** Language Servers
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t)
#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :straight t)

  (global-set-key (kbd "C-x C-t") 'vterm)
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
  	:straight t
  	:custom
  	(org-roam-completion-everywhere t)
  	:bind (("C-c r t" . org-roam-buffer-toggle)
  	       ("C-c r f" . org-roam-node-find)
  	       ("C-c r i" . org-roam-node-insert)
  	       ("C-c r c" . org-roam-capture)
  	       ;; Dailies
  	       ("C-c r d" . org-roam-dailies-capture-today)
  	       :map org-mode-map
  	       ("C-M-i"    . completion-at-point))
  	:config
  	(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  	(org-roam-db-autosync-mode)
  	:init
  	(org-reload))

  (use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  (setq org-agenda-files (quote ("~/org-roam")))
#+END_SRC
* Search
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode))

  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)

  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  (use-package emacs
    :straight t
    :init
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator))

  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :straight t
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC
* Others
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-solarized
    :straight t)
  (load-theme 'solarized t)
  (solarized-toggle-background-mode)

  (use-package rainbow-mode
    :straight t)
#+END_SRC
